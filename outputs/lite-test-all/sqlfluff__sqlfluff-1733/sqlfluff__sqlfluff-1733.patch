diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..e831711ad
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,26 @@
+import subprocess
+
+# SQL query to test
+sql_query = '''
+WITH example AS (
+    SELECT my_id,
+        other_thing,
+        one_more
+    FROM
+        my_table
+)
+
+SELECT *
+FROM example
+'''
+
+# Write the SQL query to a file
+with open('test_query.sql', 'w') as f:
+    f.write(sql_query)
+
+# Run sqlfluff fix on the file
+result = subprocess.run(['sqlfluff', 'fix', 'test_query.sql'], capture_output=True, text=True)
+
+# Output the result
+print('STDOUT:', result.stdout)
+print('STDERR:', result.stderr)
\ No newline at end of file
diff --git a/src/sqlfluff/core/parser/segments/base.py b/src/sqlfluff/core/parser/segments/base.py
index a95a07632..9203d3c33 100644
--- a/src/sqlfluff/core/parser/segments/base.py
+++ b/src/sqlfluff/core/parser/segments/base.py
@@ -491,7 +491,15 @@ class BaseSegment:
 
     def _reconstruct(self):
         """Make a string from the segments of this segment."""
-        return "".join(seg.raw for seg in self.segments)
+        # Adjust indentation for the first field in a SELECT statement
+        adjusted_segments = []
+        for i, seg in enumerate(self.segments):
+            if i == 0 and seg.is_type('select_clause_element'):
+                # Remove leading space for the first field
+                adjusted_segments.append(seg.raw.lstrip())
+            else:
+                adjusted_segments.append(seg.raw)
+        return "".join(adjusted_segments)
 
     def _preface(self, ident, tabsize):
         """Returns the preamble to any logging."""
