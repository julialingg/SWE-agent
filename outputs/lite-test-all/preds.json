{
    "sqlfluff__sqlfluff-1625": {
        "model_name_or_path": "lite-test-all",
        "instance_id": "sqlfluff__sqlfluff-1625",
        "model_patch": "diff --git a/src/sqlfluff/rules/L031.py b/src/sqlfluff/rules/L031.py\nindex 838c6ce5d..da132d42c 100644\n--- a/src/sqlfluff/rules/L031.py\n+++ b/src/sqlfluff/rules/L031.py\n@@ -62,6 +62,11 @@ class Rule_L031(BaseRule):\n             if not from_clause_segment:\n                 return None\n \n+            # Check for join conditions\n+            join_clause = from_clause_segment.get_child(\"join_clause\")\n+            if not join_clause:\n+                return None\n+\n             from_expression = from_clause_segment.get_child(\"from_expression\")\n             from_expression_element = None\n             if from_expression:\n"
    },
    "sqlfluff__sqlfluff-1733": {
        "model_name_or_path": "lite-test-all",
        "instance_id": "sqlfluff__sqlfluff-1733",
        "model_patch": "diff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..e831711ad\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,26 @@\n+import subprocess\n+\n+# SQL query to test\n+sql_query = '''\n+WITH example AS (\n+    SELECT my_id,\n+        other_thing,\n+        one_more\n+    FROM\n+        my_table\n+)\n+\n+SELECT *\n+FROM example\n+'''\n+\n+# Write the SQL query to a file\n+with open('test_query.sql', 'w') as f:\n+    f.write(sql_query)\n+\n+# Run sqlfluff fix on the file\n+result = subprocess.run(['sqlfluff', 'fix', 'test_query.sql'], capture_output=True, text=True)\n+\n+# Output the result\n+print('STDOUT:', result.stdout)\n+print('STDERR:', result.stderr)\n\\ No newline at end of file\ndiff --git a/src/sqlfluff/core/parser/segments/base.py b/src/sqlfluff/core/parser/segments/base.py\nindex a95a07632..9203d3c33 100644\n--- a/src/sqlfluff/core/parser/segments/base.py\n+++ b/src/sqlfluff/core/parser/segments/base.py\n@@ -491,7 +491,15 @@ class BaseSegment:\n \n     def _reconstruct(self):\n         \"\"\"Make a string from the segments of this segment.\"\"\"\n-        return \"\".join(seg.raw for seg in self.segments)\n+        # Adjust indentation for the first field in a SELECT statement\n+        adjusted_segments = []\n+        for i, seg in enumerate(self.segments):\n+            if i == 0 and seg.is_type('select_clause_element'):\n+                # Remove leading space for the first field\n+                adjusted_segments.append(seg.raw.lstrip())\n+            else:\n+                adjusted_segments.append(seg.raw)\n+        return \"\".join(adjusted_segments)\n \n     def _preface(self, ident, tabsize):\n         \"\"\"Returns the preamble to any logging.\"\"\"\n"
    }
}